#!/usr/bin/env python3

import argparse

import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.ticker as tick
from matplotlib import patches
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.gridspec as gridspec
import colorsys
import h5py
import functools
import random
from decimal import Decimal

aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0
offblack = '#262626'
grey = '0.88'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'serif',
    'font.serif': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42,
})


plot_functions = {}


def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1, h_pad=None, w_pad=None,
           rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


def set_loc(ax, xy=None, nbins=5, steps=[1, 2, 3, 4, 10],
            prune=None, minor=0):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            tick.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )
        if minor:
            axis.set_minor_locator(tick.AutoMinorLocator(minor))


def fmt_tick(n):
    s = str(float(n))
    if abs(n) > 10 and s.endswith('.0'):
        return s[:-2]
    return s


def desaturate(color, fraction=0.5):
    h, l, s = colorsys.rgb_to_hls(*color[:3])
    return colorsys.hls_to_rgb(h, l, fraction*s)


def gen_mean(x, y, p):

    if abs(p) < 1e-9:
        return np.sqrt(x * y)
    else:
        return (((x + 1e-12)**p + (y + 1e-12)**p)/2)**(1/p)


def kln(x, y):
    Qs2_min = np.minimum(x, y)
    Qs2_max = np.maximum(x, y)
    arg = Qs2_max/(Qs2_min + 1e-12)
    return Qs2_min*(2 + np.log(arg + 1e-12))/2


def ekrt_gen():
    K, beta = 0.5, 0.8
    a = (-0.0044020 + 0.0220154*K - 0.0005974*beta
         + 0.0125320*K*beta - 0.0032844*beta**2 - 0.0033841*K**2)
    b = (0.8537670 - 0.0580163*K + 0.0957157*beta
         - 0.0016413*K*beta - 0.1788390*beta**2 + 0.0220187*K**2)
    C = (3.9027590 - 0.6277216*K + 1.0703962*beta
         + 0.0692793*K*beta - 1.9808449*beta**2 + 0.1106879*K**2)
    n = (0.1312476 - 0.0157637*K - 0.0362980*beta
         - 0.0022506*K*beta + 0.0615129*beta**2 + 0.0052116*K**2)

    def inner(x, y):
        p_sat = C*(a + x*y)**n - b*C*a**n
        e_0 = (K/np.pi)*p_sat**3
        s_0 = e_0**(3/4)

        return s_0

    return inner

ekrt = ekrt_gen()


def pfit(model):
    
    def func(T, p, norm):
        TA, TB = T
        return norm*np.ravel(gen_mean(TA, TB, p))

    T = np.linspace(0, 4, 100)
    TA, TB = np.meshgrid(T, T)
    
    popt, pcov = curve_fit(func, np.meshgrid(T, T), np.ravel(model(TA, TB)))
    p, norm = popt

    return [round(p, 2), round(norm, 5)] 


@plot
def cgc_compare():
    fig, axes = plt.subplots(
        ncols=3, figsize=(textwidth, 0.55*columnwidth), sharey=True
    )

    labels = ['KLN model', 'EKRT model', 'WN model']
    saturation = [kln, ekrt, lambda x, y: (x + y)/2]
    pvals = [pfit(kln), [0, 1.03], [1, 1]]
    TB = [1, 2, 3]

    for ax, (p, norm), func, label in zip(axes, pvals, saturation, labels):
        X = np.linspace(0, 4, 1000)
        [ax.plot(X, norm*gen_mean(X, Y, p), lw=0.8, color=plt.cm.Blues(0.6),
                label='Gen. Mean; $p={}$'.format(p) if Y == 1  else '')
         for Y in TB]

        [ax.plot(X, func(X, Y), lw=0.8, dashes=(4, 3),
                 color='0.25', label=label if Y == 1 else '')
         for Y in TB]

        offsets = [2.2, 2.8, 3.4]
        labels = ['${:d}$', '${:d}$', '$T_B={:d}$']

        if ax == axes[2]:
            [ax.text(4, func(4, Y) + 0.05, label.format(int(Y)) + ' fm$^{-2}$',
                     ha='right', va='baseline', rotation=18)
             for Y, offset, label in zip(TB, offsets, labels)]

        ax.set_xlim(0, 4)
        ax.set_xticks([0, 1, 2, 3, 4])
        ax.set_xlabel(r'$T_A$ [fm$^{-2}$]')
        ax.set_ylim(0, 4)
        ax.set_yticks([0, 1, 2, 3])

        handles, labels = ax.get_legend_handles_labels()
        ax.legend(handles, labels, bbox_to_anchor=(0, 1.05),
                  loc=2, handlelength=1.5)

    axes[0].set_ylabel(r'Entropy density [fm$^{-2}$]')

    finish()


@plot
def thickness():
    plt.figure(figsize=(columnwidth, aspect*columnwidth))

    X = np.linspace(-9, 9, 361)
    TA = np.loadtxt('data/thickness/PbPb_TA.dat')[:, 180]
    TB = np.loadtxt('data/thickness/PbPb_TB.dat')[:, 180]
    Tmin = np.minimum(TA, TB)
    Tmax = np.maximum(TA, TB)

    blue = plt.cm.Blues(0.6)
    dark_blue = plt.cm.Blues(0.7)

    plt.fill_between(X, Tmin, Tmax, lw=0, color=grey, zorder=0,
                     label=r'$T_\mathrm{min} < T < T_\mathrm{max}$')
    plt.fill_between(X, gen_mean(TA, TB, -1), gen_mean(TA, TB, 1),
                     color=blue, lw=0, alpha=0.4, label=r'$-1<p<1$')
    plt.plot(X, gen_mean(TA, TB, 0), color=dark_blue, label='$p=0$')

    plt.xlim(-8.5, 8.5)
    plt.xticks(np.linspace(-8, 8, 9))
    plt.xlabel(r'$x$ [fm]')
    plt.ylim(0, 5)
    plt.yticks([0, 2, 4])
    plt.ylabel(r'Thickness [fm$^{-2}$]')

    handles, labels = plt.gca().get_legend_handles_labels()
    handles = handles[1], handles[2], handles[0]
    labels = labels[1], labels[2], labels[0]
    plt.legend(handles, labels, labelspacing=0.4,
               handletextpad=0.4, markerfirst=False,
               bbox_to_anchor=(1.03, 1.05))
    plt.annotate('Pb+Pb 2.76 TeV', xy=(0.02, 0.985), va='top', color=offblack,
                 xycoords='axes fraction')

    finish()


def split_cent_bins(array, bin_edges):
    """
    Split an array into chunks for each centrality bin. The
    array must already be sorted by centrality along its first axis.

    """
    for a, b in zip(bin_edges[:-1], bin_edges[1:]):
        i, j = (int(array.shape[0]*c/100) for c in (a, b))
        yield array[i:j]


@plot
def nch_per_npart():
    plt.figure(figsize=(columnwidth, aspect*columnwidth))

    clow, chigh, alice_nch, alice_error = \
        np.loadtxt('data/nch_per_npart/ALICE_PbPb_5.02.dat',
                   usecols=(0, 1, 2, 3)).T
    bin_edges = np.append(clow, chigh[-1:])

    trento_data = np.loadtxt('data/nch_per_npart/PbPb.dat', usecols=(2, 3))
    npart, nch = trento_data[trento_data[:, 1].argsort()[::-1]].T
    trento_npart = np.array(
        [bin.mean() for bin in split_cent_bins(npart, bin_edges)])
    trento_nch = np.array(
        [bin.mean() for bin in split_cent_bins(nch, bin_edges)])
    norm = alice_nch[5]/trento_nch[5]

    plt.plot(trento_npart, norm*trento_nch/(trento_npart/2),
             lw=1, zorder=1, color=plt.cm.Blues(0.6), label='Pb+Pb')
    plt.errorbar(trento_npart, alice_nch/(trento_npart/2),
                 yerr=alice_error/(trento_npart/2), fmt='o', capsize=0,
                 color=offblack, mew=0, zorder=2, label='Pb+Pb')

    npart, nch = np.loadtxt('data/nch_per_npart/pPb.dat', usecols=(2, 3)).T
    plt.errorbar(npart.mean(), norm*nch.mean()/(npart.mean()/2), fmt='s',
                 capsize=0, zorder=1, mec=plt.cm.Blues(0.6), mfc='white',
                 mew=1, label=r'p+Pb')
    plt.errorbar(npart.mean(), 16.81/(npart.mean()/2),
                 yerr=0.71/(npart.mean()/2), fmt='s', capsize=0,
                 color=offblack, mew=0, zorder=2, label='p+Pb')

    plt.xlim(-20, 420)
    plt.xticks(np.arange(0, 500, 100))
    plt.xlabel(r'$N_\mathrm{part}$')
    plt.ylim(3, 11)
    plt.yticks(np.arange(4, 12, 2))
    plt.ylabel('$(dN_\mathrm{ch}/d\eta) / (N_\mathrm{part} / 2)$')

    handles, labels = plt.gca().get_legend_handles_labels()
    alice_handles = handles[1], handles[3]
    alice_labels = labels[1], labels[3]
    trento_handles = handles[0], handles[2]
    trento_labels = labels[0], labels[2]
    first_legend = plt.legend(alice_handles, alice_labels,
                              bbox_to_anchor=(0.74, 0.4), handlelength=0.8,
                              columnspacing=1.5, title='ALICE')
    first_legend.get_title().set_fontsize(textiny)
    plt.gca().add_artist(first_legend)
    second_legend = plt.legend(trento_handles, trento_labels,
                               bbox_to_anchor=(1, 0.4), handlelength=0.8,
                               columnspacing=1.5, title='TRENTO')
    second_legend.get_title().set_fontsize(textiny)
    plt.text(15, 10, '$\sqrt{s_{NN}}$ = 5.02 TeV')

    finish()


def _zetas(T, Tc=0.180,
           A1=-13.77, A2=27.55, A3=13.45,
           lam1=0.9, lam2=0.25, lam3=0.9, lam4=0.22,
           sig1=0.025, sig2=0.13, sig3=0.0025, sig4=0.022):
    t = np.asarray(T)/Tc
    zetas = np.empty_like(t)

    low = t < 0.995
    xm1 = t[low] - 1
    zetas[low] = lam3*np.exp(xm1/sig3) + lam4*np.exp(xm1/sig4) + 0.03

    high = t > 1.05
    xm1 = t[high] - 1
    zetas[high] = lam1*np.exp(-xm1/sig1) + lam2*np.exp(-xm1/sig2) + 0.001

    mid = ~(low | high)
    x = t[mid]
    zetas[mid] = A1*x*x + A2*x - A3

    return zetas


@plot
def validation():
    calibration = 'data/bayesian/calibration/results_err10.hdf'
    batch_obs_validation = 'data/bayesian/model/batch-observables-validation.hdf'
    
    observables = [
        ('dN_dy/pion', r'$dN/dy_{\pi^\pm}$', (0, 3500)),
        ('mean_pT/pion', r'$\langle p_T \rangle_{\pi^\pm}$', (0.4, 0.75)),
        ('vn/2', r'$v_2\{2\}$', (0, 0.13)),
    ]

    cent_edges = [0, 5, 10, 20, 30, 40, 50, 60, 70, 80]
    cent_bins = list(zip(cent_edges[:-1], cent_edges[1:]))

    fig, axes = plt.subplots(ncols=len(observables), figsize=(textwidth, 1.1*textwidth/3))

    with \
            h5py.File(calibration, 'r') as cal, \
            h5py.File(batch_obs_validation, 'r') as vld:
        for (key, label, lim), ax in zip(observables, axes):
            for i, cmap in (0, 'Blues'), (4, 'Oranges'):
                x = cal['validation'][key]['Y'][:, i]
                xerr = cal['validation'][key]['Yerr'][:, i]
                y = vld[key]['Y'][:, i]
                yerr = vld[key]['Yerr'][:, i]
                ax.errorbar(
                    x, y, xerr=xerr, yerr=yerr, fmt='o', ms=4, capsize=0,
                    color=getattr(plt.cm, cmap)(0.8), mec='white', mew=0.3,
                    label='–'.join(map(str, cent_bins[i])) + '%'
                )
            ax.plot(lim, lim, lw=1, color='.7', zorder=-10)
            ax.set_xlim(lim)
            ax.set_ylim(lim)
            ax.set_aspect('equal')
            ax.set_xlabel('Predicted ' + label)
            if ax.is_first_col():
                ax.set_ylabel('Observed')
                ax.legend(loc='best')
            set_loc(ax)

    finish()


@plot
def observables_plot():
    id_parts = [
        ('pion',   r'$\pi^{\!\pm}$', 'Blues'),
        ('kaon',   r'$K^{\!\pm}$', 'Greens'),
        ('proton', r'$p\bar p$', 'Reds')
    ]

    flows = [(str(n), '$v_{}$'.format(n), c)
             for n, c in enumerate(['GnBu', 'Purples', 'Oranges'], start=2)]

    plots = [
        ('dN_dy', 'Yields $dN/dy$', r'$dN/dy$', (1, 4e3), id_parts),
        ('mean_pT', 'Mean $p_T$ [GeV]', r'$p_T$ [GeV]', (0, 1.8), id_parts),
        ('vn', 'Flow cumulants $v_n\{2\}$', r'$v_n\{2\}$', (0, 0.12), flows),
    ]

    prior_data = 'data/bayesian/model/batch-observables.hdf'
    post_data = 'data/bayesian/calibration/results_err10.hdf'
    exp_data = 'data/bayesian/exp/data.hdf'

    fig, axes = plt.subplots(nrows=2, ncols=3,
                             figsize=(textwidth, 1.6*aspect*columnwidth))

    for axes_row, model_data, posterior in zip(
            axes, [prior_data, post_data], [False, True]
    ):
        model = h5py.File(model_data, 'r')
        exp = h5py.File(exp_data, 'r')

        if posterior:
            samples = np.random.randint(0, model['chain'].shape[0], size=100)

        for ax, (obs, title, ylabel, ylim, subplots) in zip(axes_row, plots):
            for subobs, label, cmap in subplots:
                color = desaturate(getattr(plt.cm, cmap)(0.55), 0.8)

                n = 6 if obs == 'vn' and subobs != '2' else 8

                x, y, yerr = (exp[obs][subobs][k][:n]
                              for k in ['x', 'y', 'yerr'])

                ax.errorbar(x, y, yerr=yerr, fmt='o',
                            capsize=0, color=offblack, mfc=offblack,
                            mew=0, zorder=1000)

                ax.text(x[-1] + 2, y[-1], label, ha='left', va='center',
                        color=offblack, size=texnormal)

                kwargs = dict(color=color, lw=0.4)

                if posterior:
                    for i in samples:
                        ax.plot(x, model['samples'][obs][subobs][i], alpha=0.15, **kwargs)
                else:
                    for y in model[obs][subobs]['Y'][:, :n]:
                        ax.plot(x, y, alpha=0.12, **kwargs)

            ax.set_xlim([0, 75])
            ax.set_ylim(ylim)
            if obs == 'dN_dy':
                ax.set_ylabel('Posterior samples' if posterior else 'Training data')
            #ax.set_ylabel(ylabel, position=(0,1), ha='right', va='baseline', labelpad=5)

            if posterior:
                ax.set_xlabel('Centrality %')
            else:
                ax.set_title(title)
                ax.xaxis.set_ticklabels([])

            if obs == 'dN_dy':
                ax.set_yscale('log')
                ax.minorticks_off()
            else:
                set_loc(ax, 'y', nbins=4, steps=[0,2,3,4,5,6,8,9,10],
                prune='upper')

    finish(h_pad=0, w_pad=0.3)


def posterior(dataset, **kwargs):
    design = 'data/bayesian/model/design.hdf'
    calibration = dataset

    with h5py.File(design, 'r') as f:
        labels = list(f['labels'])
        etas_hrg_index = 4
        etas_slope_index = 5
        indices = np.arange(len(labels)) != etas_hrg_index
        del labels[etas_hrg_index]
        labels[etas_slope_index]  += '$^\dagger$'
        ranges = np.array(f['range'])[indices]

    with h5py.File(calibration, 'r') as f:
        chain = np.array(f['chain']).T[indices]
        #chain = f['chain'][:1000000].T[indices]

    nxy = chain.shape[0]
    assert nxy == len(labels)

    normal_cmap, highlight_cmap = plt.cm.Blues, plt.cm.Blues

    fig, axes = plt.subplots(
        nrows=nxy, ncols=nxy,
        sharex='col', sharey='row',
        figsize=(textwidth, textwidth)
    )
   
    for n, (ax, c, lim) in enumerate(zip(axes.diagonal(), chain, ranges)):
        cmap = highlight_cmap if n in [1, 6] else normal_cmap
        line_color = cmap(.8)
        fill_color = cmap(.5, alpha=.2)

        # override range for norm
        if n == 0:
            lim = 100, 150

        counts, edges = np.histogram(c, bins=100, range=lim)
        x = (edges[1:] + edges[:-1]) / 2
        y = .84 * (lim[1] - lim[0]) * counts / counts.max() + lim[0]
        ax.plot(x, y, lw=0.8, color=line_color)
        ax.fill_between(x, lim[0], y, color=fill_color, zorder=-10)

        if n in [0, 1, 3, 6, 7]:
            mode = x[y.argmax()]
            fmt_str = '{:#.2g}' if n == 1 else '{:#.3g}'
            #ax.text(mode, lim[1], fmt_str.format(mode),
            #        ha='left' if mode < lim[0] + 0.3*(lim[1]-lim[0])
            #        else 'center', va='top')

        ticks = [0.14, 0.15, 0.16] \
            if n == 7 else [lim[0], (lim[0] + lim[1])/2, lim[1]]

        for xy in ['x', 'y']:
            getattr(ax, 'set_{}lim'.format(xy))(lim)
            getattr(ax, 'set_{}ticks'.format(xy))(ticks)
            getattr(ax, 'set_{}ticklabels'.format(xy))([fmt_tick(i)
                                                        for i in ticks])

    for ny, nx in zip(*np.tril_indices_from(axes, k=-1)):
        x = chain[nx]
        y = chain[ny]
        hist = functools.partial(
            np.histogram2d, x, y, range=(ranges[nx], ranges[ny])
        )
        
        ax = axes[ny][nx]
        H, xedges, yedges = hist(bins=100)
        H[H == 0] = None
        cmap = highlight_cmap if (ny, nx) == (5, 4) else normal_cmap
        ax.pcolorfast(xedges, yedges, H.T, cmap=cmap)
        
        ax = axes[nx][ny]
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        for side in 'left', 'right', 'top', 'bottom':
            ax.spines[side].set_visible(False)
        corrcoef = np.corrcoef(x, y)[1,0]
        color = 0.5 * (1 + corrcoef)
        ax.patch.set_facecolor(plt.cm.coolwarm(color))
        ax.patch.set_alpha(0.4)
        ax.annotate("{0:.2f}".format(corrcoef).replace('-',u'\u2212'), xy=(0.5, 0.5),
                    ha='center', va='center', xycoords='axes fraction',
                    fontsize=texnormal) 
    
    for n, label in enumerate(labels):
        axes[-1][n].set_xlabel(label)
        axes[n][0].set_ylabel(label)
        
        axes[0][n].annotate(label, xy=(0.5, 1.01), xycoords='axes fraction',
                            va='bottom', ha='center')
        axes[n][-1].annotate(label, xy=(1.01, 0.5), xycoords='axes fraction',
                            va='center', ha='left', rotation=-90)
        
        if n != 7:
            for t, justify in zip(axes[-1][n].xaxis.get_major_ticks(),
                                  ['left', 'center', 'right']):
                t.label1.set_horizontalalignment(justify)
            for t, justify in zip(axes[n][0].yaxis.get_major_ticks(),
                                  ['bottom', 'center', 'top']):
                t.label1.set_verticalalignment(justify)

     
    finish(h_pad=0.3, w_pad=0.3, rect=[0, 0.0, 0.98, 0.98])

@plot
def posterior_identified():
    filename = 'data/bayesian/calibration/results_err10.hdf'
    posterior(filename)


@plot
def posterior_integrated():
    filename = 'data/bayesian/calibration/results_err10_dNch_deta_only.hdf'
    posterior(filename)

@plot
def posterior_compare():
    design = 'data/bayesian/model/design.hdf'
    calibrations = 'data/bayesian/calibration/results_err10.hdf', \
                  'data/bayesian/calibration/results_err10_dNch_deta_only.hdf'

    with h5py.File(design, 'r') as f:
        labels = list(f['labels'])
        etas_hrg_index = 4
        etas_slope_index = 5
        indices = np.arange(len(labels)) != etas_hrg_index
        del labels[etas_hrg_index]
        labels[etas_slope_index] += '$^\dagger$'
        ranges = np.array(f['range'])[indices]
        nxy = len(labels)

    fig, axes = plt.subplots(
        ncols=nxy, figsize=(textwidth, 2*aspect*textwidth/nxy)
    )
    
    zorders = 2, 1
    colors = plt.cm.Blues, plt.cm.Oranges
    clabels = 'identified $dN/dy$', '$dN_\mathrm{ch}/d\eta$' 

    axes[0].plot(0, 0, label='Calibrated to:', alpha=0)

    for calibration, cmap, order, clabel in zip(calibrations, colors, zorders, clabels):
        with h5py.File(calibration, 'r') as f:
            chain = np.array(f['chain']).T[indices]
            #chain = f['chain'][:1000000].T[indices]

        for n, (ax, c, lim, label) in enumerate(zip(axes, chain, ranges, labels)):
            line_color = cmap(.8)
            fill_color = cmap(.5, alpha=.2)

            # override range for norm
            if n == 0:
                lim = 100, 150

            counts, edges = np.histogram(c, bins=100, range=lim, density=True)
            x = (edges[1:] + edges[:-1]) / 2
            y = counts
            ax.plot(x, y, lw=0.8, color=line_color, zorder=order, label=clabel if n==0 else '')
            ax.fill_between(x, 0, y, color=fill_color, zorder=order)
            ax.get_yaxis().set_visible(False)
            ax.spines['left'].set_visible(False)
        
            ticks = [0.14, 0.15, 0.16] \
                if n == 7 else [lim[0], (lim[0] + lim[1])/2, lim[1]]

            ax.set_xlim(lim)
            ax.set_xticks(ticks)
            ax.set_xticklabels([fmt_tick(i) for i in ticks])
            ax.set_xlabel(label)
           
            if n !=7:
                for t, justify in zip(ax.get_xaxis().get_major_ticks(),
                                      ['left', 'center', 'right']):
                    t.label1.set_horizontalalignment(justify)
            if n==0:
                ax.legend(bbox_to_anchor=(0.5, 1.09), ncol=3,
                          fontsize=textiny, columnspacing=1,
                          bbox_transform=fig.transFigure, loc='upper center')
   
    finish(w_pad=0.5, rect=[0, 0, 1, 0.85])

@plot
def mode_observables(**kwargs):
    batch_obs_mode = 'data/bayesian/model/batch-observables-mode.hdf'
    exp_data = 'data/bayesian/exp/data.hdf'
    colors = plt.cm.Set1(np.linspace(0,1,6, endpoint=False))
    id_parts = [
        ('pion',   r'$\pi^{\!\pm}$', 'Blues'),
        ('kaon',   r'$K^{\!\pm}$', 'Greens'),
        ('proton', r'$p\bar p$', 'Reds')
    ]

    flows = [(str(n), '$v_{}$'.format(n), c)
             for n, c in enumerate(['GnBu', 'Purples', 'Oranges'], start=2)]

    labelinfo = [
        ((2.5, 3500), (2.5, 500), (2.5, 40)),
        ((2.5, 0.45), (2.5, 0.8), (2.5, 1.25)),
        ((72, 0.06), (47, 0.035), (47, 0.021)),
    ]

    plots = [
        ('dN_dy', 'Yields $dN/dy$', r'$dN/dy$', (1, 3e3),
         id_parts, labelinfo[0]),
        ('mean_pT', 'Mean $p_T$ [GeV]',
         r'$p_T$ [GeV]', (0, 1.5), id_parts, labelinfo[1]),
        ('vn', 'Flow cumulants $v_n\{2\}$', r'$v_n\{2\}$', (0, 0.11),
         flows, labelinfo[2]),
    ]

    fig = plt.figure(figsize=(textwidth, 1.2*aspect*columnwidth))
    gs = plt.GridSpec(12, len(plots))

    with \
            h5py.File(batch_obs_mode, 'r') as mode, \
            h5py.File(exp_data, 'r') as exp:
        for n, (obs, title, ylabel,
                ylim, subplots, labelpos) in enumerate(plots):
            ax = fig.add_subplot(gs[:8, n])
            ratio_ax = fig.add_subplot(gs[8:, n])

            ax.set_xlim(0, 76)
            ax.set_ylim(ylim)
            #ax.set_ylabel(ylabel, position=(0,1), ha='right', va='baseline', labelpad=5)
            ax.set_title(title)

            for (subobs, label, cmap), labelxy in zip(subplots, labelpos):
                color = desaturate(getattr(plt.cm, cmap)(0.6), 0.8)
                ncent = min(i[obs][subobs]['x'].size for i in [mode, exp])

                x = mode[obs][subobs]['x'][:ncent]
                y = mode[obs][subobs]['Y'][0, :ncent]
                ax.plot(x, y, color=color, lw=0.8)

                yexp, yexperr = (exp[obs][subobs][k][:ncent]
                                 for k in ['y', 'yerr'])
                ax.errorbar(x, yexp, yerr=yexperr, fmt='o', ms=2.5,
                            mfc=offblack, mew=0, capsize=0,
                            color=offblack, zorder=1000)

                ax.text(labelxy[0], labelxy[1], label, ha='left', va='top',
                        size=texnormal)

                ratio_ax.plot(x, y/yexp, color=color, lw=0.8)

            if obs == 'dN_dy':
                ax.set_yscale('log')
                ax.minorticks_off()
            else:
                set_loc(ax, 'y', nbins=4)
            ax.get_xaxis().set_ticklabels([])

            ratio_ax.axhline(1, color='0.4', lw=0.5, zorder=-100)
            ratio_ax.axhspan(0.9, 1.1, color=grey, alpha=0.7, zorder=-200)

            ratio_ax.set_xlabel('Centrality %')
            ratio_ax.set_ylim(0.8, 1.2)
            ratio_ax.set_yticks([0.8, 1, 1.2])
            ratio_ax.set_ylabel('Model/Exp' if n is 0 else '', labelpad=4)
            ratio_ax.set_xlim(0, 76)

    finish(pad=0.0, h_pad=0, w_pad=0.3)


@plot
def posterior_p_arrows(n=1, **kwargs):
    design = 'data/bayesian/model/design.hdf'
    calibration = 'data/bayesian/calibration/results_err10.hdf'
    
    with h5py.File(design, 'r') as f:
        label = f['labels'][n]
        lim = f['range'][n]

    with h5py.File(calibration, 'r') as f:
        chain = f['chain'][:, n]

    fig = plt.figure(figsize=(0.9*columnwidth, 0.5*aspect*columnwidth))
    ax = fig.gca()

    counts, edges = np.histogram(chain, bins=100, range=lim)
    x = (edges[1:] + edges[:-1]) / 2
    y = counts / counts.max()
    ax.plot(x, y, lw=0.8, color=plt.cm.Blues(0.8))
    ax.fill_between(x, y, color=plt.cm.Blues(0.15), zorder=-10, label='Posterior')
    ax.plot(np.linspace(-1, 1, 2), -1*np.ones(2), lw=0.8, color=offblack, label=r'dS/dy') 

    ax.set_xlabel(label, labelpad=2)

    for spine in ax.spines.values():
        spine.set_visible(False)

    # KLN model
    ax.text(-0.67, 0.05, 'KLN', fontsize=texsmall, va='bottom', ha='center')
    ax.plot([-0.68, -0.66], [0, 0], lw=4, color=offblack, alpha=0.6, label='KLN', clip_on=False)
   
    # EKRT model
    ax.text(0, 0.05, 'EKRT', fontsize=texsmall, va='bottom', ha='center')
    ax.plot([-0.09, 0.12], [0, 0], lw=4, color=offblack, alpha=0.6, label='EKRT', clip_on=False)


    # WN model
    ax.text(1, 0.05, 'WN', fontsize=texsmall, va='bottom', ha='center')
    ax.text(1, 0, '•', fontsize=texsmall, va='center', ha='center')
    
    ax.set_xticks(np.arange(-10, 11, 5)/10)
    ax.set_xticks(np.arange(-75, 76, 50)/100, minor=True)
    ax.set_xticklabels(['-1.0', '-0.5', '0.0', '0.5', '1.0'], y=-0.02)

    xm = 1.15
    ax.set_xlim(-xm, xm)
    ax.add_artist(
        patches.FancyArrowPatch(
            (-xm, 0), (xm, 0),
            linewidth=0.8,
            arrowstyle=patches.ArrowStyle.CurveFilledAB(
                head_length=3, head_width=1.5
            ),
            facecolor=offblack, edgecolor=offblack,
            clip_on=False, zorder=100
        )
    )

    ax.set_yticks([])
    ax.set_ylim(0, y.max())

    finish(despine=False)

@plot
def viscosity_samples():
    calibration = 'data/bayesian/calibration/results_err10.hdf'
    
    fig, axes = plt.subplots(nrows=2, figsize=(columnwidth, 1.8*aspect*columnwidth))
    etas_ax, zetas_ax = axes

    Tmin, Tc, Tmax = 0.145, 0.154, 0.300
    T1 = np.linspace(Tmin, Tmax, 1000)
    T2 = np.linspace(Tc, Tmax, 100)

    if calibration is not None:
        line_kwargs = dict(color=plt.cm.Blues(0.7), alpha=0.2, lw=0.7)

        with h5py.File(calibration, 'r') as cal:
            sample_idx = np.random.randint(0, cal['chain'].shape[0], size=200)

            for i in sample_idx:
                etas_min, etas_slope, zetas_norm = cal['chain'][i, 5:8]
                etas_ax.plot(T2, etas_min + etas_slope*(T2 - Tc),
                             **line_kwargs)
                zetas_ax.plot(T1, zetas_norm*_zetas(T1), **line_kwargs)

    text_kwargs = dict(fontsize=texsmall)
    fill_kwargs = dict(color=grey, alpha=0.8, zorder=-1000)

    etas_ax.fill_between(T2, 0.3 + 2*(T2 - Tc), **fill_kwargs)
    etas_ax.axvline(Tc, dashes=(4,2), lw=0.8, color='0.3')
    etas_ax.text(Tc + 0.003, 0.45, '$T_c = \,{}$ GeV'.format(Tc),
                 ha='left', va='center', fontsize = textiny, color=offblack)

    points = etas_ax.transData.transform([
        (Tc, 0.3),
        (Tmax, 0.3 + 2*(Tmax-Tc))
    ])
    dx, dy = points[1] - points[0]
    angle = 180/np.pi * np.arctan2(dy, dx)

    etas_ax.set_ylabel(r'$\eta/s$')
    etas_title = etas_ax.set_title('Shear viscosity')
    etas_title.set_y(0.9)

    zetas_ax.plot(T1, _zetas(T1), color=offblack, lw=0.8, label=r'Unscaled $(\zeta/s)(T)$')
    zetas_ax.fill_between(T1, 2*_zetas(T1), label='Initial range', **fill_kwargs)
    zetas_ax.plot(np.linspace(0, 0.3, 2), np.zeros(2), lw=0.8, color=plt.cm.Blues(0.6), label='Posterior samples')
    zetas_ax.set_xlabel('Temperature [GeV]')
    zetas_ax.set_ylabel(r'$\zeta/s$')
    zetas_title = zetas_ax.set_title('Bulk viscosity')
    zetas_title.set_y(0.9)
    
    handles, labels = zetas_ax.get_legend_handles_labels()
    zetas_ax.legend(handles[::-1], labels[::-1], bbox_to_anchor=(1.03, 0.85))

    for ax in axes:
        ax.set_xticks(np.arange(150, 301, 50)/1000)
        ax.set_xlim(Tmin, Tmax)
        set_loc(ax, 'y', minor=2)

    finish(h_pad=1)

@plot
def trento_events():
    fig, axes = plt.subplots(2, 2, sharex=True, sharey=True, figsize=(columnwidth, columnwidth))
    
    x = np.linspace(-10, 10, 400)
    lim = (-8, 8)
    ticks = np.linspace(-5, 5, 3)

    cdict = cm.get_cmap('Blues')._segmentdata
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    for ax, iev in zip(axes.flat, [67, 56, 20, 43]):
        with h5py.File('data/trento/events.hdf', 'r') as f:
            ev = f['event_{}'.format(iev)]
            profile = np.array(ev)
            cs = ax.pcolorfast(x, x, profile, zorder=-100, cmap=my_cmap)
            cs.set_clim(0.0, np.max(profile))
            properties = '$N_{}$$=${}\n$b$$=${:.1f} fm'.format(r'\mathrm{part}', ev.attrs['npart'], ev.attrs['b'])
            ax.annotate(properties, xy=(0.99, 0.99), xycoords='axes fraction', ha='right',
                        va='top', fontsize=textiny)

        for xy in ['x', 'y']:
            getattr(ax, 'set_{}lim'.format(xy))(lim)
            getattr(ax, 'set_{}ticks'.format(xy))(ticks)
        if ax.is_last_row():
            ax.set_xlabel('$x$ [fm]')
        if ax.is_first_col():
            ax.set_ylabel('$y$ [fm]')

    
    finish(w_pad=0.3, h_pad=0.3)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
