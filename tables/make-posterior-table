#!/usr/bin/env python3

import h5py
import numpy as np


def format_ci(samples, ci=.9):
    """
    Compute the median and a credible interval (default 90%) for an array of
    samples and return a TeX-formatted string.
    The array will be sorted in place.

    """
    samples.sort()

    median = samples[int(.5*samples.size)]

    # number of intervals to compute
    nci = int((1 - ci)*samples.size)

    # find highest posterior density (HPD) credible interval
    # i.e. the one with minimum width
    cil = samples[:nci]   # interval lows
    cih = samples[-nci:]  # interval highs
    ihpd = np.argmin(cih - cil)

    # uncertainties
    ul = median - cil[ihpd]
    uh = cih[ihpd] - median

    # decide precision for formatting numbers
    # this is NOT general but it works for the present data
    if abs(median) < .2 and ul < .02:
        precision = 3
    elif abs(median) < 1:
        precision = 2
    elif abs(median) > 10:
        precision = 0
    else:
        precision = 1

    fmt = str(precision).join(['{:#.', 'f}'])

    return ''.join([
        '\parbox{3.5em}{\hfill $', fmt.format(median), '$}',
        '$_{-', fmt.format(ul), '}',
        '^{+', fmt.format(uh), '}$'
    ])


def main():
    datadir = '../fig/data/bayesian/'

    with h5py.File(datadir + 'model/design.hdf', 'r') as f:
        labels = list(f['labels'])

    def load_chains():
        for i in ['', '_dNch_deta_only']:
            with h5py.File(
                    datadir + 'calibration/results_err10{}.hdf'.format(i), 'r'
            ) as f:
                yield np.ascontiguousarray(np.array(f['chain']).T)

    for label, samples in zip(labels, zip(*load_chains())):
        if 'hrg' in label:
            continue
        elif 'slope' in label:
            label += ' [GeV$^{-1}$]'
        elif 'sw' in label:
            label = label.replace('sw', 'switch')
        elif label == 'norm':
            label = 'Normalization'

        print(
            ' & '.join([label] + (
                [format_ci(samples[0]), r'\hspace{3em}---']
                if 'switch' in label else
                [format_ci(s) for s in samples]
            )),
            r'\\ \noalign{\smallskip}'
        )


if __name__ == "__main__":
    main()
